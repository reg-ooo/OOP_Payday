// =====================================
// 1. USER ENTITY (MODEL)
// =====================================
package data.model;

public class User {
    private int userID;
    private String fullName;
    private String phoneNumber;
    private String email;
    private String pin;
    private String birthDate;
    private String username;

    public User() {}

    public User(int userID, String fullName, String phoneNumber, String email,
                String pin, String birthDate, String username) {
        this.userID = userID;
        this.fullName = fullName;
        this.phoneNumber = phoneNumber;
        this.email = email;
        this.pin = pin;
        this.birthDate = birthDate;
        this.username = username;
    }

    public int getUserID() { return userID; }
    public void setUserID(int userID) { this.userID = userID; }

    public String getFullName() { return fullName; }
    public void setFullName(String fullName) { this.fullName = fullName; }

    public String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(String phoneNumber) { this.phoneNumber = phoneNumber; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPin() { return pin; }
    public void setPin(String pin) { this.pin = pin; }

    public String getBirthDate() { return birthDate; }
    public void setBirthDate(String birthDate) { this.birthDate = birthDate; }

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
}

// =====================================
// 2. WALLET ENTITY (MODEL)
// =====================================
package data.model;

public class Wallet {
    private int walletID;
    private int userID;
    private double balance;

    public Wallet() {}

    public Wallet(int walletID, int userID, double balance) {
        this.walletID = walletID;
        this.userID = userID;
        this.balance = balance;
    }

    public int getWalletID() { return walletID; }
    public void setWalletID(int walletID) { this.walletID = walletID; }

    public int getUserID() { return userID; }
    public void setUserID(int userID) { this.userID = userID; }

    public double getBalance() { return balance; }
    public void setBalance(double balance) { this.balance = balance; }
}

// =====================================
// 3. TRANSACTION ENTITY (MODEL)
// =====================================
package data.model;

public class Transaction {
    private int transactionID;
    private int walletID;
    private String transactionType;
    private double amount;
    private String transactionDate;

    public Transaction() {}

    public Transaction(String transactionType, double amount, String transactionDate) {
        this.transactionType = transactionType;
        this.amount = amount;
        this.transactionDate = transactionDate;
    }

    public int getTransactionID() { return transactionID; }
    public void setTransactionID(int transactionID) { this.transactionID = transactionID; }

    public int getWalletID() { return walletID; }
    public void setWalletID(int walletID) { this.walletID = walletID; }

    public String getTransactionType() { return transactionType; }
    public void setTransactionType(String transactionType) { this.transactionType = transactionType; }

    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }

    public String getTransactionDate() { return transactionDate; }
    public void setTransactionDate(String transactionDate) { this.transactionDate = transactionDate; }
}

// =====================================
// 4. USER DAO INTERFACE
// =====================================
package data.dao;

import data.model.User;

public interface UserDAO {
    boolean insert(User user);
    User findByUsername(String username);  // Returns null if not found
    User findById(int userID);  // Returns null if not found
    boolean usernameExists(String username);
    boolean validateCredentials(String username, String pin);
    boolean validatePin(int userID, String pin);
    int getMaxUserID();  // Returns -1 if no users exist
}

// =====================================
// 5. USER DAO IMPLEMENTATION
// =====================================
package data.dao;

import data.DatabaseService;
import data.DatabaseProtectionProxy;
import data.model.User;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class UserDAOImpl implements UserDAO {
    private DatabaseService database;

    public UserDAOImpl() {
        this.database = DatabaseProtectionProxy.getInstance();
    }

    @Override
    public boolean insert(User user) {
        String query = "INSERT INTO Users(fullName, phoneNumber, email, pin, birthDate, username) " +
                      "VALUES (?, ?, ?, ?, ?, ?)";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setString(1, user.getFullName());
            pstmt.setString(2, user.getPhoneNumber());
            pstmt.setString(3, user.getEmail());
            pstmt.setString(4, user.getPin());
            pstmt.setString(5, user.getBirthDate());
            pstmt.setString(6, user.getUsername());

            pstmt.executeUpdate();
            return true;
        } catch (Exception e) {
            System.err.println("Error inserting user: " + e.getMessage());
            return false;
        }
    }

    @Override
    public User findByUsername(String username) {
        String query = "SELECT * FROM Users WHERE username = ?";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setString(1, username);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                return mapResultSetToUser(rs);
            }
        } catch (Exception e) {
            System.err.println("Error finding user: " + e.getMessage());
        }
        return null;
    }

    @Override
    public User findById(int userID) {
        String query = "SELECT * FROM Users WHERE userID = ?";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setInt(1, userID);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                return mapResultSetToUser(rs);
            }
        } catch (Exception e) {
            System.err.println("Error finding user by ID: " + e.getMessage());
        }
        return null;
    }

    @Override
    public boolean usernameExists(String username) {
        String query = "SELECT COUNT(*) FROM Users WHERE username = ?";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setString(1, username);
            ResultSet rs = pstmt.executeQuery();

            return rs.next() && rs.getInt(1) > 0;
        } catch (Exception e) {
            System.err.println("Error checking username: " + e.getMessage());
            return false;
        }
    }

    @Override
    public boolean validateCredentials(String username, String pin) {
        String query = "SELECT COUNT(*) FROM Users WHERE username = ? AND pin = ?";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setString(1, username);
            pstmt.setString(2, pin);
            ResultSet rs = pstmt.executeQuery();

            return rs.next() && rs.getInt(1) > 0;
        } catch (Exception e) {
            System.err.println("Error validating credentials: " + e.getMessage());
            return false;
        }
    }

    @Override
    public boolean validatePin(int userID, String pin) {
        String query = "SELECT COUNT(*) FROM Users WHERE userID = ? AND pin = ?";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setInt(1, userID);
            pstmt.setString(2, pin);
            ResultSet rs = pstmt.executeQuery();

            return rs.next() && rs.getInt(1) > 0;
        } catch (Exception e) {
            System.err.println("Error validating PIN: " + e.getMessage());
            return false;
        }
    }

    @Override
    public int getMaxUserID() {
        String query = "SELECT MAX(userID) FROM Users";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (Exception e) {
            System.err.println("Error getting max userID: " + e.getMessage());
        }
        return -1;
    }

    private User mapResultSetToUser(ResultSet rs) throws Exception {
        User user = new User();
        user.setUserID(rs.getInt("userID"));
        user.setFullName(rs.getString("fullName"));
        user.setPhoneNumber(rs.getString("phoneNumber"));
        user.setEmail(rs.getString("email"));
        user.setPin(rs.getString("pin"));
        user.setBirthDate(rs.getString("birthDate"));
        user.setUsername(rs.getString("username"));
        return user;
    }
}

// =====================================
// 6. WALLET DAO INTERFACE
// =====================================
package data.dao;

import data.model.Wallet;

public interface WalletDAO {
    boolean insert(Wallet wallet);
    Wallet findByUserId(int userID);  // Returns null if not found
    boolean updateBalance(int userID, double newBalance);
}

// =====================================
// 7. WALLET DAO IMPLEMENTATION
// =====================================
package data.dao;

import data.DatabaseService;
import data.DatabaseProtectionProxy;
import data.model.Wallet;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class WalletDAOImpl implements WalletDAO {
    private DatabaseService database;

    public WalletDAOImpl() {
        this.database = DatabaseProtectionProxy.getInstance();
    }

    @Override
    public boolean insert(Wallet wallet) {
        String query = "INSERT INTO Wallets(userID, balance) VALUES (?, ?)";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setInt(1, wallet.getUserID());
            pstmt.setDouble(2, wallet.getBalance());

            pstmt.executeUpdate();
            return true;
        } catch (Exception e) {
            System.err.println("Error inserting wallet: " + e.getMessage());
            return false;
        }
    }

    @Override
    public Wallet findByUserId(int userID) {
        String query = "SELECT * FROM Wallets WHERE userID = ?";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setInt(1, userID);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                Wallet wallet = new Wallet();
                wallet.setWalletID(rs.getInt("walletID"));
                wallet.setUserID(rs.getInt("userID"));
                wallet.setBalance(rs.getDouble("balance"));
                return wallet;
            }
        } catch (Exception e) {
            System.err.println("Error finding wallet: " + e.getMessage());
        }
        return null;
    }

    @Override
    public boolean updateBalance(int userID, double newBalance) {
        String query = "UPDATE Wallets SET balance = ? WHERE userID = ?";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setDouble(1, newBalance);
            pstmt.setInt(2, userID);

            return pstmt.executeUpdate() > 0;
        } catch (Exception e) {
            System.err.println("Error updating balance: " + e.getMessage());
            return false;
        }
    }
}

// =====================================
// 8. TRANSACTION DAO INTERFACE
// =====================================
package data.dao;

import data.model.Transaction;
import java.util.List;

public interface TransactionDAO {
    boolean insert(Transaction transaction);
    Transaction findLatestByWalletId(int walletID);  // Returns null if not found
    List<Transaction> findAllByWalletId(int walletID);  // Returns empty list if none found
}

// =====================================
// 9. TRANSACTION DAO IMPLEMENTATION
// =====================================
package data.dao;

import data.DatabaseService;
import data.DatabaseProtectionProxy;
import data.model.Transaction;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

public class TransactionDAOImpl implements TransactionDAO {
    private DatabaseService database;

    public TransactionDAOImpl() {
        this.database = DatabaseProtectionProxy.getInstance();
    }

    @Override
    public boolean insert(Transaction transaction) {
        String query = "INSERT INTO Transactions(walletID, transactionType, amount, transactionDate) " +
                      "VALUES (?, ?, ?, ?)";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setInt(1, transaction.getWalletID());
            pstmt.setString(2, transaction.getTransactionType());
            pstmt.setDouble(3, transaction.getAmount());
            pstmt.setString(4, transaction.getTransactionDate());

            pstmt.executeUpdate();
            return true;
        } catch (Exception e) {
            System.err.println("Error inserting transaction: " + e.getMessage());
            return false;
        }
    }

    @Override
    public Transaction findLatestByWalletId(int walletID) {
        String query = "SELECT * FROM Transactions WHERE walletID = ? " +
                      "ORDER BY transactionID DESC LIMIT 1";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setInt(1, walletID);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                return mapResultSetToTransaction(rs);
            }
        } catch (Exception e) {
            System.err.println("Error finding transaction: " + e.getMessage());
        }
        return null;
    }

    @Override
    public List<Transaction> findAllByWalletId(int walletID) {
        List<Transaction> transactions = new ArrayList<>();
        String query = "SELECT * FROM Transactions WHERE walletID = ? " +
                      "ORDER BY transactionID DESC";

        try (PreparedStatement pstmt = database.prepareStatement(query)) {
            pstmt.setInt(1, walletID);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                transactions.add(mapResultSetToTransaction(rs));
            }
        } catch (Exception e) {
            System.err.println("Error finding transactions: " + e.getMessage());
        }
        return transactions;
    }

    private Transaction mapResultSetToTransaction(ResultSet rs) throws Exception {
        Transaction transaction = new Transaction();
        transaction.setTransactionID(rs.getInt("transactionID"));
        transaction.setWalletID(rs.getInt("walletID"));
        transaction.setTransactionType(rs.getString("transactionType"));
        transaction.setAmount(rs.getDouble("amount"));
        transaction.setTransactionDate(rs.getString("transactionDate"));
        return transaction;
    }
}

// =====================================
// 10. REFACTORED USERS CLASS
// =====================================
package data;

import main.MainFrame;
import pages.*;
import panels.*;
import data.dao.*;
import data.model.*;

import javax.swing.*;
import java.util.function.Consumer;

public class Users {
    private static Users instance;
    private UserDAO userDAO;
    private WalletDAO walletDAO;
    private UserInfo userInfo;

    private Users() {
        this.userDAO = new UserDAOImpl();
        this.walletDAO = new WalletDAOImpl();
        this.userInfo = UserInfo.getInstance();
    }

    public static Users getInstance() {
        if (instance == null) {
            instance = new Users();
        }
        return instance;
    }

    public boolean addUser(String fullName, String phoneNumber, String email,
                           String password, String birthDate, String username) {

        DatabaseProtectionProxy.getInstance().setUserContext(-1, true);

        // Validate input
        if (!isValidNumber(phoneNumber)) {
            System.out.println("Invalid phone number");
            return false;
        }

        if (!validateUsername(username)) {
            System.out.println("Invalid username");
            return false;
        }

        try {
            // Create User entity
            User user = new User();
            user.setFullName(capitalizeFirstLetter(fullName));
            user.setPhoneNumber(phoneNumber);
            user.setEmail(email);
            user.setPin(password);
            user.setBirthDate(birthDate);
            user.setUsername(username);

            // Insert user using DAO
            if (!userDAO.insert(user)) {
                return false;
            }

            // Get the newly created userID
            int newUserID = userDAO.getMaxUserID();
            if (newUserID == -1) {
                System.out.println("Failed to get new user ID");
                return false;
            }

            // Create wallet for the user
            Wallet wallet = new Wallet();
            wallet.setUserID(newUserID);
            wallet.setBalance(0.0);

            if (walletDAO.insert(wallet)) {
                System.out.println("User added successfully!");
                return true;
            }

            return false;
        } catch (Exception e) {
            System.out.println("Adding user failed: " + e.getMessage());
            return false;
        }
    }

    public void loginAccount(String username, String password, Consumer<String> onButtonClick) {
        DatabaseProtectionProxy.getInstance().setUserContext(-1, true);

        try {
            // Use DAO to find user by username
            User user = userDAO.findByUsername(username);

            if (user != null) {
                // Validate password
                if (user.getPin().equals(password)) {
                    int userID = user.getUserID();
                    System.out.println("Login successful!");

                    // Login user
                    userInfo.loginUser(userID);

                    // Switch to authenticated user context
                    DatabaseProtectionProxy.getInstance().setUserContext(userID, true);

                    loadComponents();
                    onButtonClick.accept("success");
                } else {
                    System.out.println("Login failed! Incorrect password");
                }
            } else {
                System.out.println("Login failed! User not found");
            }
        } catch (Exception e) {
            System.out.println("Login Error: " + e.getMessage());
        }
    }

    private boolean validateUsername(String username) {
        if (username == null || username.length() < 4) {
            System.out.println("Username too short");
            return false;
        }

        if (userDAO.usernameExists(username)) {
            System.out.println("Username already exists");
            return false;
        }

        return true;
    }

    public boolean revalidateUser() {
        if (!userInfo.isLoggedIn()) {
            return false;
        }

        String pin = JOptionPane.showInputDialog(null, "Please enter your pin: ");
        if (pin == null || pin.isEmpty()) {
            return false;
        }

        // Use DAO to validate PIN
        return userDAO.validatePin(userInfo.getCurrentUserId(), pin);
    }

    private String capitalizeFirstLetter(String name) {
        if (name == null || name.isEmpty()) {
            return name;
        }

        name = name.trim();
        if (name.isEmpty()) {
            return name;
        }

        int spaceIndex = name.indexOf(' ');
        if (spaceIndex == -1) {
            return Character.toUpperCase(name.charAt(0)) + name.substring(1).toLowerCase();
        }

        String firstWord = name.substring(0, spaceIndex);
        String rest = name.substring(spaceIndex + 1);

        String capitalizedFirst = Character.toUpperCase(firstWord.charAt(0)) +
                                 firstWord.substring(1).toLowerCase();

        return capitalizedFirst + " " + capitalizeFirstLetter(rest);
    }

    private boolean isValidNumber(String phoneNumber) {
        if (phoneNumber == null || phoneNumber.trim().isEmpty() || phoneNumber.length() != 11) {
            return false;
        }
        return phoneNumber.matches("09\\d{9}");
    }

    public void loadComponents() {
        NPanel.getInstance().loadComponents();
        TransactionPanel.getInstance().loadComponents();
        MainFrame.loadNavBar();
    }
}

// =====================================
// 11. REFACTORED USERINFO CLASS
// =====================================
package data;

import data.dao.*;
import data.model.*;

public class UserInfo {
    private static UserInfo instance;
    private WalletDAO walletDAO;
    private TransactionDAO transactionDAO;
    private int currentUserId;
    private boolean isLoggedIn = false;

    private UserInfo() {
        this.walletDAO = new WalletDAOImpl();
        this.transactionDAO = new TransactionDAOImpl();
    }

    public static UserInfo getInstance() {
        if (instance == null) {
            instance = new UserInfo();
        }
        return instance;
    }

    public void loginUser(int userId) {
        this.currentUserId = userId;
        this.isLoggedIn = true;
        DatabaseProtectionProxy.getInstance().setUserContext(userId, true);
    }

    public void logoutUser() {
        this.isLoggedIn = false;
        this.currentUserId = 0;
        DatabaseProtectionProxy.getInstance().clearUserContext();
    }

    public int getCurrentUserId() {
        return currentUserId;
    }

    public Transaction getLatestTransaction() {
        if (!isLoggedIn) {
            throw new SecurityException("Please login first");
        }

        // Get wallet first, then get transaction
        Wallet wallet = walletDAO.findByUserId(currentUserId);

        if (wallet != null) {
            int walletID = wallet.getWalletID();
            return transactionDAO.findLatestByWalletId(walletID);
        }

        return null;
    }

    public double getBalance() {
        if (!isLoggedIn) {
            throw new SecurityException("Please login first");
        }

        Wallet wallet = walletDAO.findByUserId(currentUserId);

        if (wallet != null) {
            return wallet.getBalance();
        }

        return 0.0;
    }

    public boolean isLoggedIn() {
        return isLoggedIn;
    }
}